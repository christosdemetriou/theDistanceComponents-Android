apply plugin: 'maven'
apply plugin: 'signing'

configurations {
    deployerJar
}

dependencies {
    deployerJar "ar.com.synergian:wagon-git:0.2.3"
}

task lookForArtifacts {
    doLast {
        def artifactPath = GROUP + "/" + POM_ARTIFACT_ID
        artifactPath = artifactPath.replaceAll("\\.", "/")

        def repositoryUrl = 'https://api.bitbucket.org/1.0/repositories/thedistance/maven_repository/raw/releases/' + artifactPath + '/' + VERSION_NAME
        println repositoryUrl
        if (urlExists(repositoryUrl)) {
            throw new RuntimeException("Artifact with version " + VERSION_NAME + " already exist - not executing uploadArchives")
        }
        return true
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            configuration = configurations.deployerJar
            repository(url: 'git:releases://git@bitbucket.org:thedistance/maven_repository.git')
            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            uniqueVersion = true

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}
signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

def urlExists(String repositoryUrl) {

    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()
        println("responseCode: " + responseCode)

	      if (responseCode == 401) {
          throw new RuntimeException("Unauthorized BitBucket user - please provide valid username and password in gradle.properties file")
        }

        return (200 == responseCode)
    } catch (IOException ignored) {
        return false
    }
}

def getBase64EncodedCredentials() {
    Properties props = new Properties()
    props.load(new FileInputStream("$rootDir/user.properties"))

    def s = props.getProperty("USERNAME") + ":" + props.getProperty("PASSWORD");
    return s.bytes.encodeBase64().toString()
}